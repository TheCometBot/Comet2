import discord
from discord.ext import commands
import openai
import os
import aiohttp
import uuid
import asyncio
import time
from urllib.parse import quote
from googletrans import Translator

# === globale Variablen ===
message_histories = {}  # AI-History pro Nachricht
translator = Translator()  # √úbersetzer

async def translate_text(text: str, dest_lang: str):
    loop = asyncio.get_event_loop()
    try:
        # googletrans blockiert, also in Thread auslagern
        result = await loop.run_in_executor(None, lambda: translator.translate(text, dest=dest_lang))
        return result.text
    except Exception:
        return text  # fallback

# === Sprachumschalt-View ===
class LangSwitchView(discord.ui.View):
    def __init__(self, message: discord.Message, original_text: str, preferred_lang: str):
        super().__init__(timeout=None)
        self.message = message
        self.original_text = original_text  # Bot-Text in Basissprache
        self.current_lang = preferred_lang

        # initial: Basissprache aktiv
        self.add_item(discord.ui.Button(label="Deutsch", style=discord.ButtonStyle.primary, disabled=(preferred_lang == "de"), custom_id="lang_de"))
        self.add_item(discord.ui.Button(label="English", style=discord.ButtonStyle.primary, disabled=(preferred_lang == "en"), custom_id="lang_en"))

    @discord.ui.button(label="Deutsch", style=discord.ButtonStyle.primary, custom_id="lang_de")
    async def switch_deutsch(self, button, interaction: discord.Interaction):
        if self.current_lang != "de":
            translated = await translate_text(self.original_text, "de")
            self.current_lang = "de"
            self.clear_items()
            self.add_item(discord.ui.Button(label="Deutsch", style=discord.ButtonStyle.primary, disabled=True, custom_id="lang_de"))
            self.add_item(discord.ui.Button(label="English", style=discord.ButtonStyle.primary, disabled=False, custom_id="lang_en"))
            await interaction.response.edit_message(content=translated, view=self)

    @discord.ui.button(label="English", style=discord.ButtonStyle.primary, custom_id="lang_en")
    async def switch_english(self, button, interaction: discord.Interaction):
        if self.current_lang != "en":
            translated = await translate_text(self.original_text, "en")
            self.current_lang = "en"
            self.clear_items()
            self.add_item(discord.ui.Button(label="Deutsch", style=discord.ButtonStyle.primary, disabled=False, custom_id="lang_de"))
            self.add_item(discord.ui.Button(label="English", style=discord.ButtonStyle.primary, disabled=True, custom_id="lang_en"))
            await interaction.response.edit_message(content=translated, view=self)

# === Hauptregister-Funktion ===
def register(bot: commands.Bot, db=None, on_message_listener=[]):
    os.makedirs("../generated_images", exist_ok=True)

    ai_group = discord.SlashCommandGroup(
        name="ai",
        description="AI-bezogene Befehle"
    )

    client = openai.OpenAI(
        base_url="https://api.aimlapi.com/v1",
        api_key=os.getenv('AI_API_KEY')
    )

    def ask(question: str, history: list = None):
        response = client.chat.completions.create(
            model="google/gemma-3n-e4b-it",
            messages=[
                {"role": "user", "content": "[SYSTEM] Du bist ein hilfreicher Assistent namens CometAI(in Beta) / You are a helpful assistant named CometAI(in Beta)"},
                *(history or []),
                {"role": "user", "content": question}
            ]
        )
        return response.choices[0].message.content

    def chunk_text(text, size=2000):
        return [text[i:i+size] for i in range(0, len(text), size)]

    def get_bot_texts(preferred_lang: str):
        texts = {
            "thinking": {"de": "Die AI denkt nach... ‚è≥", "en": "The AI is thinking... ‚è≥"},
            "title_generated": {"de": "üñºÔ∏è Generiertes Bild", "en": "üñºÔ∏è Generated Image"},
            "footer_generated": {"de": "Bild generiert von Pollinations AI in ~{:.2f} Sekunden",
                                 "en": "Image generated by Pollinations AI in ~{:.2f} seconds"},
            "draw_error": {"de": "Fehler beim Erstellen des Bildes. Bitte versuche es sp√§ter erneut.",
                           "en": "Error generating image. Please try again later."}
        }
        return {k: v[preferred_lang] for k, v in texts.items()}

    @ai_group.command(name="ask", description="Stelle eine Frage an die AI")
    async def ai_ask(ctx, question: str, preferred_lang: str = "de"):
        texts = get_bot_texts(preferred_lang)
        await ctx.defer()
        bot_msg = await ctx.respond(texts["thinking"])
        bot_msg_obj = await bot_msg.original_message()

        # History f√ºr diese Nachricht initialisieren
        message_histories[bot_msg_obj.id] = [{"role": "user", "content": "[SYSTEM] Start der Konversation / Start of conversation"}]

        # AI Antwort generieren
        loop = asyncio.get_event_loop()
        answer = await loop.run_in_executor(None, ask, question, message_histories[bot_msg_obj.id])
        message_histories[bot_msg_obj.id].append({"role": "user", "content": question})
        message_histories[bot_msg_obj.id].append({"role": "assistant", "content": answer})

        # Antwort senden (mit Chunking)
        chunks = chunk_text(answer)
        view = LangSwitchView(bot_msg_obj, chunks[0], preferred_lang)
        await bot_msg_obj.edit(content=chunks[0], view=view)
        for chunk in chunks[1:]:
            await ctx.send(chunk)

    async def message_listener(message):
        if message.author.bot:
            return

        if message.reference and isinstance(message.reference.resolved, discord.Message):
            ref = message.reference.resolved

            if ref.id in message_histories:
                # aktuelle Sprache pro Antwort verwenden
                preferred_lang = "de"  # default, kann dynamisch aus DB kommen
                texts = get_bot_texts(preferred_lang)
                history = message_histories[ref.id]

                reply_msg = await message.reply(texts["thinking"], mention_author=False)
                original_text = message.content
                history.append({"role": "user", "content": original_text})
                loop = asyncio.get_event_loop()
                reply = await loop.run_in_executor(None, ask, original_text, history)
                history.append({"role": "assistant", "content": reply})

                chunks = chunk_text(reply)
                view = LangSwitchView(reply_msg, chunks[0], preferred_lang)
                await reply_msg.edit(content=chunks[0], view=view)
                for chunk in chunks[1:]:
                    await message.channel.send(chunk)

    async def generate_image(prompt: str, preferred_lang: str = "de"):
        texts = get_bot_texts(preferred_lang)
        url = "https://image.pollinations.ai/prompt/" + quote(prompt)
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                if resp.status == 200:
                    name = f"image_{uuid.uuid4()}.png"
                    with open("../generated_images/" + name, 'wb') as f:
                        f.write(await resp.read())
                    return "../generated_images/" + name
                else:
                    return None

    @ai_group.command(name="draw", description="Erstelle ein Bild mit der AI")
    async def ai_draw(ctx, prompt: str, preferred_lang: str = "de"):
        texts = get_bot_texts(preferred_lang)
        await ctx.defer()
        bot_msg = await ctx.respond(texts["thinking"])
        bot_msg_obj = await bot_msg.original_message()

        start_time = time.time()
        image_path = await generate_image(prompt, preferred_lang)
        end_time = time.time()

        if image_path:
            file = discord.File(image_path, filename="generated_image.png")
            embed = discord.Embed(
                title=texts["title_generated"],
                description=f"Prompt: {prompt[:800]}",
                color=discord.Color.blue()
            )
            embed.set_image(url="attachment://generated_image.png")
            embed.set_footer(text=texts["footer_generated"].format(end_time - start_time))
            view = LangSwitchView(bot_msg_obj, texts["title_generated"], preferred_lang)
            await bot_msg_obj.edit(content=None, embed=embed, file=file, view=view)
        else:
            view = LangSwitchView(bot_msg_obj, texts["draw_error"], preferred_lang)
            await bot_msg_obj.edit(content=texts["draw_error"], view=view)

    on_message_listener.append(message_listener)
    bot.add_application_command(ai_group)
